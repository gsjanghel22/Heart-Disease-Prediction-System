# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eo_iFG7-Q5DYzJK4TsNSiK9FHWyCEaY1

# Heart Disease Prediction Using Logistic Regression

Importing the Dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import plotly.express as px
import matplotlib.pyplot as plt
from matplotlib import rcParams
import seaborn as sns
sns.set()
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import warnings
warnings.filterwarnings('ignore')

"""Data Collection & Processing"""

# loading the csv data to pandas dataframe
heart_data = pd.read_csv('/content/heart.csv')

# printing first 5 rows of the data set
heart_data.head()

# printing last 5 rows of the data set
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some information about the data
heart_data.info()

# checking for the missing values
heart_data.isnull().sum()

# statistical measures of the data
heart_data.describe()

"""E.D.A - Essential Data Analysation

General overview of data.

1) age

2) sex - (1 = male; 0 = female)

3) cp - chest pain type (4 values)

4) trestbps - resting blood pressure

5) chol - serum cholestoral in mg/dl

6) fbs - fasting blood sugar > 120 mg/dl (1 = true; 0 = false)

7) restecg - resting electrocardiographic results (values 0,1,2)

8) thalach - maximum heart rate achieved

9) exang - exercise induced angina (1 = yes; 0 = no)

10) oldpeak - ST depression induced by exercise relative to rest

11) slope - the slope of the peak exercise ST segment

12) ca - number of major vessels (0-3) colored by flourosopy

13) thal - 0 = normal; 1 = fixed defect; 2 = reversable defect.

14) traget - (1 = died; 0 = lived)

Chest Pain Types

a. value 0 : typical angina

b. value 1 : atypical angina

c. value 2 : non-anginal pain

d. value 3 : asymptomatic
"""

sns.countplot(heart_data['cp'])
plt.xticks([0,1,2,3],["typical angina", "atypical angina", "non-anginal pain","asymptomatic"])
plt.xticks(rotation=75)
plt.show()

# Chest Pain Distribution as per Target variable
sns.countplot(x="cp", hue="target", data=heart_data)
plt.legend(labels = ['No-Disease','Disease'])
plt.show()

# count of male & female in this dataset
sns.countplot(heart_data['sex'])
plt.xticks([0,1],['Female', 'Male'])
plt.show()

# Gender distribution according to Target variable
sns.countplot(x='sex',hue="target",data=heart_data)
plt.xticks([1,0],['Male','Female'])
plt.legend(labels = ['No-Disease','Disease'])
plt.show()

# age distribution in the dataset
sns.displot(heart_data['age'],bins=20)
plt.show()

# Fasting blood sugar distribution according to Target variable
sns.countplot(x="fbs", hue="target", data=heart_data)
plt.legend(labels = ['No-Disease','Disease'])
plt.show()

# Resting Blood Pressure Distribution
heart_data['trestbps'].hist()

# Comparing resting blood pressure as per sex column
g = sns.FacetGrid(heart_data,hue="sex",aspect=4)
g.map(sns.kdeplot, 'trestbps', shade=True)
plt.legend(labels=['Male', 'Female'])

# Distribution of serum cholestrol
heart_data['chol'].hist()

# Plotting of continuous variables
cate_val=[]
cont_val=[]

for column in heart_data.columns:
    if heart_data[column].nunique() <=10:
        cate_val.append(column)
    else:
        cont_val.append(column)

cate_val

cont_val

heart_data.hist(cont_val,figsize=(15,6))
plt.tight_layout()
plt.show()

Deceased = heart_data.age.where(heart_data.target == 1)

sns.histplot(Deceased)
plt.title('No. of people died at different age due to heart desease');

"""This plot shows that count of people died at different age, and people with age between 50-55 has highest count."""

sns.catplot(x='sex',y='age',hue='target',data=heart_data);

"""Here sex (1 = male; 0 = female) and target (1 = died; 0 = lived)

This plot shows count of male female died at different age
"""

sns.catplot(x='exang',y='age',hue='target',data=heart_data);

"""Here exang (1 = yes 0 = no) and target (1 = died; 0 = lived)

This plot shows different age group of people who survied because of exercie.

Exploratory Analysis And Visualisation Of The Data
"""

heart_data.corr().style.background_gradient()

rcParams['figure.figsize'] = 14, 12
plt.matshow(heart_data.corr())
plt.yticks(np.arange(heart_data.shape[1]), heart_data.columns)
plt.xticks(np.arange(heart_data.shape[1]), heart_data.columns)
plt.colorbar()

# histogram for each variables
heart_data.hist()

# checking the distribution of target variables
heart_data['target'].value_counts()

rcParams['figure.figsize'] = 8,6
plt.bar(heart_data['target'].unique(), heart_data['target'].value_counts(), color = ['aquamarine', 'crimson'])
plt.xticks([0, 1])
plt.xlabel('Target Classes')
plt.ylabel('Count')
plt.title('Count of each Target Class')

"""0 --> Healty Heart
1 --> Defective Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns='target')
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into Training data & Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training with Logistic Regression model with Training Data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Traing Data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test Data : ', test_data_accuracy)

"""Building a Predictive System"""

# taking user inputs
name = input("Enter the name of the patient = ")
print()

age = input("Enter the age in years = ")
print()

sex = input("Enter the gender (1-> male, 0-> female) = ")
print()

cp = input("Enter the chest pain type (4 values from 0-3) = ")
print()

trestbps = input("Enter the resting blood pressure (in mm Hg on admission to the hospital) = ")
print()

chol = input("Enter the serum cholestrol in mg/dl = ")
print()

fbs = input("Enter the fasting blood sugar &gt; 120 mg/dl (1 -> true; 0 -> false) = ")
print()

restecg = input("Enter the resting electrocardiographic results = ")
print()

thalach = input("Enter the maximum heart rate achieved = ")
print()

exang = input("Enter the exercise induced angina (1 -> yes; 0 -> no) = ")
print()

oldpeak = input("Enter the ST depression induced by exercise relative to rest = ")
print()

slope = input("Enter the the slope of the peak exercise ST segment = ")
print()

ca = input("Enter the number of major vessels (0-3) colored by flourosopy = ")
print()

thal = input("Enter the thal (1 -> normal; 2 -> fixed defect; 3 -> reversable defect) = ")
print()

input_data = (age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print(name + " does not have a heart disease")
else:
  print(name + " has a possible heart disease")